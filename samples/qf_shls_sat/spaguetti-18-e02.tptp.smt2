(set-logic QF_SLID_LC)

(declare-sort RefSll_t 0)

(declare-fun next() (Field RefSll_t RefSll_t))

(define-fun ls ((in RefSll_t) (out RefSll_t)) Space (tospace
    (or (and  (= in out) (tobool emp) )
        (exists ((u RefSll_t))
            (and (tobool (ssep (pto in (ref next u)) (ls u out ) )) )
)  ) ) )

;; variables
(declare-fun x0() RefSll_t)
(declare-fun x1() RefSll_t)
(declare-fun x2() RefSll_t)
(declare-fun x3() RefSll_t)
(declare-fun x4() RefSll_t)
(declare-fun x5() RefSll_t)
(declare-fun x6() RefSll_t)
(declare-fun x7() RefSll_t)
(declare-fun x8() RefSll_t)
(declare-fun x9() RefSll_t)
(declare-fun x10() RefSll_t)
(declare-fun x11() RefSll_t)
(declare-fun x12() RefSll_t)
(declare-fun x13() RefSll_t)
(declare-fun x14() RefSll_t)
(declare-fun x15() RefSll_t)
(declare-fun x16() RefSll_t)
(declare-fun x17() RefSll_t)
(declare-fun x18() RefSll_t)
(declare-fun x19() RefSll_t)
(declare-fun x20() RefSll_t)
(declare-fun x21() RefSll_t)
(declare-fun x22() RefSll_t)

(assert 
		(and 

			(distinct x6 x13)
			(distinct x6 x16)
			(distinct x11 x18)
			(distinct x11 x17)
			(distinct x3 x16)
			(distinct x3 x12)
			(distinct x3 x17)
			(distinct x7 x13)
			(distinct x7 x14)
			(distinct x7 x15)
			(distinct x9 x13)
			(distinct x9 x17)
			(distinct x2 x8)
			(distinct x2 x6)
			(distinct x2 x11)
			(distinct x2 x17)
			(distinct x12 x14)
			(distinct x8 x14)
			(distinct x1 x10)
			(distinct x1 x15)
			(distinct x4 x11)
			(distinct x4 x9)
			(distinct x4 x13)
			(distinct x13 x18)
			(distinct x10 x11)
			(distinct x10 x12)
			(distinct x5 x6)
			(distinct x5 x16)
		(tobool (ssep 
			(ls x5 x14 )
			(ls x13 x15 )
			(ls x13 x12 )
			(ls x13 x2 )
			(ls x10 x11 )
			(ls x18 x10 )
			(ls x18 x11 )
			(ls x1 x5 )
			(ls x4 x15 )
			(ls x4 x11 )
			(ls x15 x16 )
			(ls x17 x10 )
			(ls x2 x16 )
			(ls x2 x6 )
			(ls x9 x15 )
			(ls x7 x12 )
			(ls x7 x13 )
			(ls x11 x9 )
		)

		)

) )

(check-sat)
;   unsat