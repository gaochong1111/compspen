(set-logic QF_SLID_LC)

(declare-sort RefSll_t 0)

(declare-fun next() (Field RefSll_t RefSll_t))

(define-fun ls ((in RefSll_t) (out RefSll_t)) Space (tospace
    (or (and  (= in out) (tobool emp) )
        (exists ((u RefSll_t))
            (and (tobool (ssep (pto in (ref next u)) (ls u out ) )) )
)  ) ) )

;; variables
(declare-fun x0() RefSll_t)
(declare-fun x1() RefSll_t)
(declare-fun x2() RefSll_t)
(declare-fun x3() RefSll_t)
(declare-fun x4() RefSll_t)
(declare-fun x5() RefSll_t)
(declare-fun x6() RefSll_t)
(declare-fun x7() RefSll_t)
(declare-fun x8() RefSll_t)
(declare-fun x9() RefSll_t)
(declare-fun x10() RefSll_t)
(declare-fun x11() RefSll_t)
(declare-fun x12() RefSll_t)
(declare-fun x13() RefSll_t)
(declare-fun x14() RefSll_t)
(declare-fun x15() RefSll_t)
(declare-fun x16() RefSll_t)
(declare-fun x17() RefSll_t)
(declare-fun x18() RefSll_t)
(declare-fun x19() RefSll_t)
(declare-fun x20() RefSll_t)
(declare-fun x21() RefSll_t)
(declare-fun x22() RefSll_t)

(assert 
		(and 

			(distinct x6 x16)
			(distinct x6 x17)
			(distinct x6 x12)
			(distinct x3 x18)
			(distinct x3 x7)
			(distinct x3 x10)
			(distinct x3 x13)
			(distinct x3 x9)
			(distinct x3 x15)
			(distinct x7 x11)
			(distinct x7 x16)
			(distinct x7 x12)
			(distinct x9 x10)
			(distinct x9 x14)
			(distinct x12 x18)
			(distinct x12 x13)
			(distinct x12 x15)
			(distinct x2 x11)
			(distinct x2 x4)
			(distinct x2 x7)
			(distinct x2 x14)
			(distinct x15 x16)
			(distinct x8 x13)
			(distinct x4 x9)
			(distinct x1 x11)
			(distinct x1 x4)
			(distinct x1 x7)
			(distinct x1 x10)
			(distinct x1 x2)
			(distinct x13 x16)
			(distinct x13 x17)
			(distinct x10 x11)
			(distinct x5 x14)
		(tobool (ssep 
			(ls x5 x15 )
			(ls x5 x9 )
			(ls x5 x4 )
			(ls x16 x13 )
			(ls x4 x12 )
			(ls x4 x6 )
			(ls x15 x1 )
			(ls x7 x13 )
		)

		)

) )

(check-sat)
;   sat