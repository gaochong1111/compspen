(set-logic QF_SLID_LC)

(declare-sort RefSll_t 0)

(declare-fun next() (Field RefSll_t RefSll_t))

(define-fun ls ((in RefSll_t) (out RefSll_t)) Space (tospace
    (or (and  (= in out) (tobool emp) )
        (exists ((u RefSll_t))
            (and (tobool (ssep (pto in (ref next u)) (ls u out ) )) )
)  ) ) )

;; variables
(declare-fun x0() RefSll_t)
(declare-fun x1() RefSll_t)
(declare-fun x2() RefSll_t)
(declare-fun x3() RefSll_t)
(declare-fun x4() RefSll_t)
(declare-fun x5() RefSll_t)
(declare-fun x6() RefSll_t)
(declare-fun x7() RefSll_t)
(declare-fun x8() RefSll_t)
(declare-fun x9() RefSll_t)
(declare-fun x10() RefSll_t)
(declare-fun x11() RefSll_t)
(declare-fun x12() RefSll_t)
(declare-fun x13() RefSll_t)
(declare-fun x14() RefSll_t)
(declare-fun x15() RefSll_t)
(declare-fun x16() RefSll_t)
(declare-fun x17() RefSll_t)
(declare-fun x18() RefSll_t)
(declare-fun x19() RefSll_t)
(declare-fun x20() RefSll_t)
(declare-fun x21() RefSll_t)
(declare-fun x22() RefSll_t)

(assert 
		(and 

			(distinct x11 x14)
			(distinct x7 x8)
			(distinct x7 x18)
			(distinct x2 x6)
			(distinct x1 x7)
			(distinct x6 x11)
			(distinct x6 x18)
			(distinct x6 x9)
			(distinct x6 x10)
			(distinct x6 x17)
			(distinct x6 x15)
			(distinct x3 x4)
			(distinct x3 x16)
			(distinct x3 x13)
			(distinct x3 x12)
			(distinct x3 x5)
			(distinct x3 x15)
			(distinct x3 x14)
			(distinct x9 x15)
			(distinct x12 x18)
			(distinct x8 x10)
			(distinct x4 x8)
			(distinct x4 x18)
			(distinct x10 x11)
			(distinct x10 x13)
			(distinct x5 x18)
			(distinct x5 x7)
			(distinct x5 x13)
			(distinct x5 x17)
		(tobool (ssep 
			(ls x13 x7 )
			(ls x13 x18 )
			(ls x13 x4 )
			(ls x1 x8 )
			(ls x4 x10 )
			(ls x8 x5 )
			(ls x15 x12 )
			(ls x15 x13 )
			(ls x12 x17 )
			(ls x7 x10 )
			(ls x6 x14 )
			(ls x6 x3 )
		)

		)

) )

(check-sat)
;   unsat