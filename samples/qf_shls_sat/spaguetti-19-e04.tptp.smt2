(set-logic QF_SLID_LC)

(declare-sort RefSll_t 0)

(declare-fun next() (Field RefSll_t RefSll_t))

(define-fun ls ((in RefSll_t) (out RefSll_t)) Space (tospace
    (or (and  (= in out) (tobool emp) )
        (exists ((u RefSll_t))
            (and (tobool (ssep (pto in (ref next u)) (ls u out ) )) )
)  ) ) )

;; variables
(declare-fun x0() RefSll_t)
(declare-fun x1() RefSll_t)
(declare-fun x2() RefSll_t)
(declare-fun x3() RefSll_t)
(declare-fun x4() RefSll_t)
(declare-fun x5() RefSll_t)
(declare-fun x6() RefSll_t)
(declare-fun x7() RefSll_t)
(declare-fun x8() RefSll_t)
(declare-fun x9() RefSll_t)
(declare-fun x10() RefSll_t)
(declare-fun x11() RefSll_t)
(declare-fun x12() RefSll_t)
(declare-fun x13() RefSll_t)
(declare-fun x14() RefSll_t)
(declare-fun x15() RefSll_t)
(declare-fun x16() RefSll_t)
(declare-fun x17() RefSll_t)
(declare-fun x18() RefSll_t)
(declare-fun x19() RefSll_t)
(declare-fun x20() RefSll_t)
(declare-fun x21() RefSll_t)
(declare-fun x22() RefSll_t)
(declare-fun x23() RefSll_t)

(assert 
		(and 

			(distinct x11 x13)
			(distinct x11 x19)
			(distinct x3 x5)
			(distinct x7 x18)
			(distinct x7 x9)
			(distinct x7 x15)
			(distinct x9 x11)
			(distinct x9 x12)
			(distinct x9 x14)
			(distinct x12 x15)
			(distinct x17 x19)
			(distinct x2 x8)
			(distinct x2 x11)
			(distinct x2 x13)
			(distinct x2 x15)
			(distinct x2 x5)
			(distinct x4 x16)
			(distinct x1 x5)
			(distinct x16 x19)
			(distinct x10 x19)
			(distinct x10 x17)
			(distinct x10 x14)
			(distinct x13 x14)
			(distinct x5 x10)
		(tobool (ssep 
			(ls x13 x9 )
			(ls x13 x11 )
			(ls x19 x7 )
			(ls x19 x11 )
			(ls x16 x13 )
			(ls x18 x2 )
			(ls x18 x19 )
			(ls x1 x12 )
			(ls x14 x9 )
			(ls x14 x18 )
			(ls x15 x6 )
			(ls x9 x18 )
			(ls x7 x3 )
			(ls x11 x4 )
		)

		)

) )

(check-sat)
;   unsat