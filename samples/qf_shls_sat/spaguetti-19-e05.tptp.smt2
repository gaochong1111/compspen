(set-logic QF_SLID_LC)

(declare-sort RefSll_t 0)

(declare-fun next() (Field RefSll_t RefSll_t))

(define-fun ls ((in RefSll_t) (out RefSll_t)) Space (tospace
    (or (and  (= in out) (tobool emp) )
        (exists ((u RefSll_t))
            (and (tobool (ssep (pto in (ref next u)) (ls u out ) )) )
)  ) ) )

;; variables
(declare-fun x0() RefSll_t)
(declare-fun x1() RefSll_t)
(declare-fun x2() RefSll_t)
(declare-fun x3() RefSll_t)
(declare-fun x4() RefSll_t)
(declare-fun x5() RefSll_t)
(declare-fun x6() RefSll_t)
(declare-fun x7() RefSll_t)
(declare-fun x8() RefSll_t)
(declare-fun x9() RefSll_t)
(declare-fun x10() RefSll_t)
(declare-fun x11() RefSll_t)
(declare-fun x12() RefSll_t)
(declare-fun x13() RefSll_t)
(declare-fun x14() RefSll_t)
(declare-fun x15() RefSll_t)
(declare-fun x16() RefSll_t)
(declare-fun x17() RefSll_t)
(declare-fun x18() RefSll_t)
(declare-fun x19() RefSll_t)
(declare-fun x20() RefSll_t)
(declare-fun x21() RefSll_t)
(declare-fun x22() RefSll_t)
(declare-fun x23() RefSll_t)

(assert 
		(and 

			(distinct x6 x15)
			(distinct x3 x14)
			(distinct x7 x19)
			(distinct x7 x13)
			(distinct x9 x11)
			(distinct x12 x17)
			(distinct x2 x6)
			(distinct x2 x16)
			(distinct x2 x15)
			(distinct x2 x14)
			(distinct x8 x13)
			(distinct x1 x18)
			(distinct x1 x12)
			(distinct x4 x8)
			(distinct x4 x10)
			(distinct x13 x15)
		(tobool (ssep 
			(ls x5 x12 )
			(ls x5 x16 )
			(ls x5 x7 )
			(ls x5 x8 )
			(ls x19 x2 )
			(ls x19 x13 )
			(ls x16 x12 )
			(ls x13 x14 )
			(ls x10 x1 )
			(ls x1 x2 )
			(ls x1 x17 )
			(ls x8 x17 )
			(ls x15 x7 )
			(ls x14 x19 )
			(ls x12 x16 )
			(ls x12 x9 )
			(ls x3 x4 )
			(ls x3 x8 )
			(ls x11 x19 )
			(ls x11 x4 )
			(ls x6 x3 )
		)

		)

) )

(check-sat)
;   sat