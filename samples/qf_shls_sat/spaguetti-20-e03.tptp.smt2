(set-logic QF_SLID_LC)

(declare-sort RefSll_t 0)

(declare-fun next() (Field RefSll_t RefSll_t))

(define-fun ls ((in RefSll_t) (out RefSll_t)) Space (tospace
    (or (and  (= in out) (tobool emp) )
        (exists ((u RefSll_t))
            (and (tobool (ssep (pto in (ref next u)) (ls u out ) )) )
)  ) ) )

;; variables
(declare-fun x0() RefSll_t)
(declare-fun x1() RefSll_t)
(declare-fun x2() RefSll_t)
(declare-fun x3() RefSll_t)
(declare-fun x4() RefSll_t)
(declare-fun x5() RefSll_t)
(declare-fun x6() RefSll_t)
(declare-fun x7() RefSll_t)
(declare-fun x8() RefSll_t)
(declare-fun x9() RefSll_t)
(declare-fun x10() RefSll_t)
(declare-fun x11() RefSll_t)
(declare-fun x12() RefSll_t)
(declare-fun x13() RefSll_t)
(declare-fun x14() RefSll_t)
(declare-fun x15() RefSll_t)
(declare-fun x16() RefSll_t)
(declare-fun x17() RefSll_t)
(declare-fun x18() RefSll_t)
(declare-fun x19() RefSll_t)
(declare-fun x20() RefSll_t)
(declare-fun x21() RefSll_t)
(declare-fun x22() RefSll_t)
(declare-fun x23() RefSll_t)
(declare-fun x24() RefSll_t)

(assert 
		(and 

			(distinct x11 x13)
			(distinct x11 x12)
			(distinct x3 x7)
			(distinct x3 x12)
			(distinct x7 x10)
			(distinct x7 x14)
			(distinct x9 x18)
			(distinct x9 x16)
			(distinct x2 x6)
			(distinct x2 x10)
			(distinct x15 x16)
			(distinct x15 x19)
			(distinct x14 x16)
			(distinct x14 x20)
			(distinct x8 x12)
			(distinct x8 x14)
			(distinct x1 x13)
			(distinct x1 x15)
			(distinct x1 x5)
			(distinct x4 x11)
			(distinct x4 x5)
			(distinct x10 x18)
			(distinct x10 x19)
			(distinct x10 x15)
			(distinct x5 x9)
			(distinct x5 x15)
		(tobool (ssep 
			(ls x10 x1 )
			(ls x13 x4 )
			(ls x16 x18 )
			(ls x18 x12 )
			(ls x4 x20 )
			(ls x4 x3 )
			(ls x20 x11 )
			(ls x20 x8 )
			(ls x14 x11 )
			(ls x17 x15 )
			(ls x17 x18 )
			(ls x2 x14 )
			(ls x7 x12 )
			(ls x7 x3 )
			(ls x11 x20 )
		)

		)

) )

(check-sat)
;   sat